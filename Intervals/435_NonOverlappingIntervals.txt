Notes:
- Sort the intervals list first
- Trick is if 2 intervals overlap, then keep the interval with smaller ending number.
  This will lower the chance that the current interval intersects with the next

Steps:
- sort the intervals list
- initialize var to represent the last kept interval. Set it to intervals[0]
- initialize no_overlap_count = 1
- for index i 1 to end of intervals
    - if intervals[i] overlaps with last_kept_interval
        - if the end of intervals[i] is less than end of last kept interval
            - set last kept interval to intervals[i]
            - *note the count does not increase
        - else
            - set last_kept_interval to interval[i]
            - increment no_overlap_count
- return len(intervals) - no_overlap_count



def eraseOverlapIntervals(self, intervals: List[List[int]]) -> int:
        
    if len(intervals) == 1:
        return 0
    
    intervals.sort(key= lambda x: x[0])

    last_kept_interval = intervals[0]
    no_overlap_count = 1

    for i in range(1, len(intervals)):
        if last_kept_interval[1] > intervals[i][0]:
            if intervals[i][1] < last_kept_interval[1]:
                no_overlap_last = intervals[i]
        else:
            last_kept_interval = intervals[i]
            no_overlap_count += 1

    return len(intervals) - no_overlap_count

