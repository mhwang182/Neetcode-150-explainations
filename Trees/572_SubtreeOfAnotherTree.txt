Notes:
- 2 part recursion solution.
- do not confuse the isSameTree method with the isSubtree method

Steps:
- implement isSameTree method recursive
- implement isSubtree method
    - if root is null, return False
    - if isSubtree root.left and subtree, return True
    - if isSubtree root.right and subtree, return True
    - if isSameTree root and subtree, return True
    - return False


class Solution:

    def isSameTree(self, p, q):
        if not p and not q:
            return True

        if (not p and q) or (p and not q):
            return False
        
        if p.val != q.val:
            return False

        if not self.isSameTree(p.left, q.left) or not self.isSameTree(p.right, q.right):
            return False
        
        return True

    def isSubtree(self, root: Optional[TreeNode], subRoot: Optional[TreeNode]) -> bool:

        if not root:
            return False

        if self.isSubtree(root.left, subRoot):
            return True

        if self.isSubtree(root.right, subRoot):
            return True

        if self.isSameTree(root, subRoot):
            return True

        return False  