Notes:
- Think of this problem as doing two 2 pointers at the same time, one starting at the front one at the end
- You know which side to focus on by which pointer is smaller (left or right). If the left is smaller then
    no matter what comes in between, its height will be the limiter. Same applies to the right
- Keep track of the max_left and max_right. For example, the max_left will act as the left boundary of the left
    2 pointer exploration. if the current left pointer is less than the max_left we know if can trap water


Steps:
- initialize left = 0, right = len(heights) -1 , max_left = 0, max_right = 0
- while left < right:
    - if height[left] < height[right], focus on the left subproblem
        - if height[left] < max_left, add the trapped water the total
        - else, max_left = height[left]
        - increment left pointer
    - else, focus on the right subproblem
        - if height[right] < max_right, add the trapped water to the total
        - else, max_right = height[right]
        - decrement right pointer


def trap(self, height: List[int]) -> int:
        left = 0; right = len(height) - 1
        max_left = 0; max_right = 0
        result = 0

        while(left < right):
            if(height[left] < height[right]):
                if(height[left] < max_left):
                    water_trapped = max_left - height[left]
                    result += water_trapped
                else:
                    max_left = height[left]
                left += 1
            else:
                if(height[right] < max_right):
                    water_trapped = max_right - height[right]
                    result += water_trapped
                else:
                    max_right = height[right]
                right -= 1
        
        return result


My Naive solution: 
def trap(self, height: List[int]) -> int:
        left = 0
        right = 1
        max_right = 1
        res = 0
        while(right < len(height)):
            if(height[right] >= height[max_right]):
                max_right = right

            if(height[right] >= height[left] or right >= (len(height) - 1)): 
                right = max_right 
                # print([left, right])
                height_limit = min(height[left], height[right]) 
                area = 0

                for i in range(left+1, right):
                    if((height_limit - height[i]) >= 0):
                        area += (height_limit - height[i])
                # print(area)
                res += area
                left = right
                right = left + 1
                max_right = right
                continue

            right += 1
        return res