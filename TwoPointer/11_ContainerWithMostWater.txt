Notes:
- Pretty standard 2 pointer
- Trick is take into consideration the current pointers to make the next decision
- Since we already start with the max base size, aka 2 pointers at the ends, the next area needs to have a bigger height
- Since the height is limited by the smallest side, we need to maximize the smallest side by changing it


def maxArea(self, height: List[int]) -> int:
    left = 0; right = len(height) - 1

    max_area = 0
    while(left < right):
        area = (right - left) * min(height[left], height[right])
        max_area = max(max_area, area)

        if(height[left] < height[right]):
            left += 1
        else:
            right -= 1

    return max_area
